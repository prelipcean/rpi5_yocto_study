Reference Documentation (Yocto)
##################################
https://www.yoctoproject.org/
https://www.yoctoproject.org/development/releases/
https://wiki.yoctoproject.org/wiki/Releases
https://docs.yoctoproject.org/brief-yoctoprojectqs/index.html
https://docs.yoctoproject.org/ref-manual/variables.html
https://layers.openembedded.org/layerindex/branch/master/layers/
https://docs.yoctoproject.org/ref-manual/variables.html#term-IMAGE_FSTYPES
https://docs.yoctoproject.org/ref-manual/variables.html#term-IMAGE_TYPES

Reference Documentation (Raspberry Pi)
########################################
https://www.raspberrypi.com/documentation/
https://datasheets.raspberrypi.com/
https://datasheets.raspberrypi.com/rp1/rp1-peripherals.pdf
https://github.com/raspberrypi/linux
https://github.com/raspberrypi/linux/tree/rpi-6.6.y/arch/arm/boot/dts/overlays


Preliminary Steps
#############################

$ sudo apt install gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 python3-subunit zstd liblz4-tool file locales libacl1
$ sudo locale-gen en_US.UTF-8

Download Poky (standalone)
######################
$ git clone git://git.yoctoproject.org/poky -b scarthgap

Building Software Package Example
######################################
$ mkdir build
$ source poky/oe-init-build-env build/
OR
$ . poky/oe-init-build-env build/

# Compile a package for testing
$ bitbake dropbear
# Clean package
$ bitbake dropbear -c cleanall

What will go to rootfs image for built package dropbear
/home/george/Workspace/Yocto/rpi5_yocto_study/build/tmp/work/core2-64-poky-linux/dropbear/2022.83/image

Cloning Additional Layers
##############################
Use https://layers.openembedded.org/layerindex/branch/master/layers/ to pick layer

$ cd poky/
$ git clone <layer_git> -b <branch_name>


Cooking (bitbake'ing) the image recipe
################################
$ bitbake core-image-minimal

Limit cores and threads from local.conf
###########################################
BB_NUMBER_THREADS="10"
PARALLEL_MAKE="-j 2"

Cook application SDK
#########################
$ bitbake meta-toolchain
or
$ bitbake meta-toolchain-qt6
or
$ bitbake meta-toolchain-moz

Install application SDK
#########################
Execute the script from tmp/deploy/sdk/*toolchain

Use the application SDK
###########################
$ . /opt/poky/5.0.1/environment-setup-cortexa76-poky-linux


Git setup
###########################
$ git config --global core.autocrlf false
$ git config --global core.eol crlf
$ git rev-parse HEAD
$ git rev-parse --short HEAD
$ git tag <tagname>
$ git push origin --tags
$ git commit -m "Message ..." --signoff
$ git submodule add -b scarthgap git://git.yoctoproject.org/poky poky
$ git submodule add -b scarthgap https://github.com/openembedded/meta-openembedded.git meta-openembedded
$ git submodule add -b scarthgap https://github.com/meta-qt5/meta-qt5.git meta-qt5
$ git submodule add -b scarthgap git://git.yoctoproject.org/meta-raspberrypi meta-raspberrypi

Useful commands
###########################
List files:
$ find ../poky/ -name "*poky*"
$ find ../../RPi_Project_Kirkstone/poky/ -type f -name \*.bb

Show BB layers
###########################
$ bitbake-layers show-layers
$ bitbake-layers show-recipes "*-image-*"
$ bitbake-layers show-recipes
$ bitbake-layers show-appends

Show BB path
###########################
$ echo $BBPATH
	results: /home/george/Workspace/Yocto/rpi5_yocto_study/build

$ bitbake-layers create-layer meta-study
$ bitbake-layers add-layer meta-study

Chech what we install
$ bitbake -e core-image-minimal | grep ^IMAGE_INSTALL=

Other BB commands
https://community.nxp.com/t5/i-MX-Processors-Knowledge-Base/Useful-bitbake-commands/ta-p/1128559

Location of build image
###########################
rpi5_yocto_study/build/tmp/deploy/images/raspberrypi5

Prepare card
###########################
$ sudo dmesg
$ sudo fdisk -l
# Convert wic.bz2 to .wic
$ bzip2 -dkf core-image-minimal-raspberrypi5.rootfs-20241012173237.wic.bz2
$ sudo dd if=core-image-minimal-raspberrypi5.rootfs-20241012173237.wic of=/dev/mmcblk0 status=progress bs=4096 && sync

If we add image filetype to build command is 
$ sudo dd if=core-image-minimal-raspberrypi5.rootfs.wic of=/dev/mmcblk0 status=progress bs=4096 && sync

Minicom (Serial communication)
###########################
$ sudo apt install minicom
$ ls /dev/tty*
	response with a new device after plug in: /dev/ttyUSB0
Setup minicom
$ sudo minicom -s
Enter minicom after setup
$ sudo minicom
CTRL+A X = exit

Ubuntu fix to build:
###########################
$ sudo apparmor_parser -R /etc/apparmor.d/unprivileged_userns

If unable to locate a package, find correct package name or update source list (repository list)
https://packages.ubuntu.com/
$ cat /etc/apt/sources.list
https://forums.linuxmint.com/viewtopic.php?t=385837

Check devices connected on network
###########################
$ sudo nmap -sn 192.168.1.0/24


SSH
###########################
$ ssh root@192.168.1.XXX
# Copy files https://www.hostinger.com/tutorials/using-scp-command-to-transfer-files/
scp [options] [source username@IP]:/[directory and file name] [destination username@IP]:/[destination directory]


Etcher Balena for image flash
###########################
https://etcher.balena.io/#download-etcher
https://github.com/balena-io/etcher/releases


Export for target from recipe
###########################
export OECORE_TARGET_SYSROOT=${STAGING_DIR_TARGET}
it will point to /build/tmp/work/cortexa76-poky-linux/hellomake/1.0.0/recipe-sysroot
Export for host
export OECORE_TARGET_SYSROOT=${STAGING_DIR_NATIVE} OR ${STAGING_DIR_HOST}
it will point to /build/tmp/work/cortexa76-poky-linux/hellomake/1.0.0/recipe-sysroot-native

GoYocto tool
###########################
https://yoctoproject.net/#


Patch
###########################
$ devtool modify <recipename>
do modifications
$git diff
$ git add <file>
$ git commit -m <message> --signoff
$ git format-patch -1'
test
$ devtool build <recipename>
remove
$ devtool reset <recipename>


Qt6
###########################
$ git clone --depth 1 --branch v6.5.7-lts git://code.qt.io/yocto/meta-qt6.git
Submodule version
$ git submodule add git://code.qt.io/yocto/meta-qt6.git meta-qt6
$ cd meta-qt6
$ git fetch --all --tags --prune
$ git checkout v6.5.7-lts

$ git tag
$ git checkout v6.7.3

https://www.qt.io/download-qt-installer-oss
https://www.qt.io/academy/course-catalog

Run from target qt app
$ /usr/bin/appqtdemo -platform eglfs

Application SDK
###########################
$ bitbake meta-toolchain

tmp/deploy/sdk folder is created and populated
Run below script to use SDK
tmp/deploy/sdk/<..>/..toolchain.sh